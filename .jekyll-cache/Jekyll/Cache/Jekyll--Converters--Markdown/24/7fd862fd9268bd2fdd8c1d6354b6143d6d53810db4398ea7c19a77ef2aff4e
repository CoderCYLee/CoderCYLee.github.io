I"&<ul id="markdown-toc">
  <li><a href="#-tweakxm" id="markdown-toc--tweakxm">// Tweak.xm</a></li>
  <li><a href="#1预处理指令" id="markdown-toc-1预处理指令">1.预处理指令</a>    <ul>
      <li><a href="#hook" id="markdown-toc-hook">%hook</a></li>
      <li><a href="#log" id="markdown-toc-log">%log</a></li>
      <li><a href="#orig" id="markdown-toc-orig">%orig</a></li>
      <li><a href="#group" id="markdown-toc-group">%group</a></li>
      <li><a href="#init" id="markdown-toc-init">%init</a></li>
      <li><a href="#ctor" id="markdown-toc-ctor">%ctor</a></li>
      <li><a href="#new" id="markdown-toc-new">%new</a></li>
      <li><a href="#c" id="markdown-toc-c">%c</a></li>
      <li><a href="#subclass" id="markdown-toc-subclass">%subclass</a></li>
      <li><a href="#config" id="markdown-toc-config">%config</a></li>
    </ul>
  </li>
</ul>
<hr />

<h3 id="-tweakxm">// Tweak.xm</h3>
<h3 id="1预处理指令">1.预处理指令</h3>
<h4 id="hook">%hook</h4>
<p>指定需要hook的class，必须以%end结尾</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%hook SpringBoard
- (void)_menuButtonDown:(id)down
{
    NSLog(@"你好");
    %orig;//call the original _menuButtonDown;
}
%end
</code></pre></div></div>
<p>这段代码的意思是勾住(hook) <em>SpringBoard</em> 类里的<em>_menuButtonDown:</em> 函数，先将一句话写入 <em>syslog</em> , 再执行函数的原有操作。</p>

<h4 id="log">%log</h4>
<p>该指令在%hook内部使用，将函数的类名、参数等信息写入syslog。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%hoot SpringBoard
- (void)_menubuttonDown:(id)down
{
    %log((NSString *)@"iOSRE",(NSString *)@"Debug");
    %orig;//call the original _menuButtonDown;
}
%end
</code></pre></div></div>
<h4 id="orig">%orig</h4>
<p>该指令在<em>%hook</em>内部使用，执行被勾住(hook)的函数的原始代码。例如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%hook SpringBoard
- (void)_menuButtonDown:(id)down
{
    NSLog(@"你好");
    %orig; // 
}
%end
</code></pre></div></div>
<p>如果去掉 *%orig * 那么原始函数不会执行。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hook SpringBoard
- (void)_menuButtonDown:(id)down
{
    NSLog(@"你好");
}
%end
</code></pre></div></div>
<p>还可以利用 <em>%orig</em> 更改原始行数的参数。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%hook SBLockScreenDateViewController
- (void)setCustomSubtitleText:(id)arg1 withColor:(id)arg2
{
    %orig(@"Re",arg2);
}
%end
</code></pre></div></div>
<p>这个方法会改变锁屏界面的日期显示.</p>

<h4 id="group">%group</h4>
<p>该指令用于将* %hook <em>分组，便于代码管理及按条件初始化分组，必须以 *%end</em> 结尾；一个* %group <em>可以包含多个</em> %hook <em>, 所有不属于某个自定义</em> group <em>的</em> %hook <em>会被隐式归类到</em> %group_ungroupes *中。用法如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%group iOS7Hook
%hook iOS7Class 
- (id)iOS7Method {
     id result = %orig; 
     NSLog(@"This class &amp; method only exist in iOS 7."); 
     return result;
 } %end 
%end // iOS7Hook

%group iOS8Hook 
%hook iOS8Class 
- (id)iOS8Method {
   id result = %orig; 
   NSLog(@"This class &amp; method only exist in iOS 8."); return result;
 }
%end
%end // iOS8Hook
</code></pre></div></div>
<h4 id="init">%init</h4>
<p>该指令用于初始化某个 * %group <em>,必须在</em> %hook <em>或</em> %ctor <em>内调用;如果带参数,则初始化指定的 group,如果不带参数,则初始化 *_ungrouped</em> ,如下:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#ifndef kCFCoreFoundationVersionNumber_iOS_8_0 
#define kCFCoreFoundationVersionNumber_iOS_8_0 1140.10 #endif
%hook SpringBoard 
- (void)applicationDidFinishLaunching:(id)application {
    %orig; 
    %init; // Equals to %init(_ungrouped)
    if (kCFCoreFoundationVersionNumber &gt;= kCFCoreFoundationVersionNumber_iOS_7_0 &amp;&amp; kCFCoreFoundationVersionNumber &lt; kCFCoreFoundationVersionNumber_iOS_8_0)
      %init(iOS7Hook);
    if (kCFCoreFoundationVersionNumber &gt;= kCFCoreFoundationVersionNumber_iOS_8_0)
      %init(iOS8Hook);
}
%end
</code></pre></div></div>
<p>只有调用了 %init,对应的 %group 才能起作用,切 切 !</p>
<h4 id="ctor">%ctor</h4>
<p><em>tweak</em> 的* constructor <em>完成初始化工作；如果不显式定义,Theos会自动生成一个 *%ctor *,并在其中调用</em> %init(_ungrouped) *。因此,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%hook SpringBoard 
- (void)reboot {
    NSLog(@"If rebooting doesn't work then I'm screwed.");
    %orig;
}
%end
</code></pre></div></div>
<p>可以成功生效,因为 Theos 隐式定义了如下内容:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%ctor
{
    %init(_ungrouped);
}
</code></pre></div></div>
<p>而</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%hook SpringBoard
- (void)reboot{
     NSLog(@"If rebooting doesn't work then I'm screwed.");
     %orig;
}
%end

%ctor
{
    // Need to call %init explicitly!
}
</code></pre></div></div>
<p>里的 <em>%hook</em> 无法生效，因为这里显示定义了 <em>%ctor</em> ，却没有调用 <em>%init</em> ，<em>%group(_ungrouped)</em> 不起作用。<em>%ctor</em> 一般可以用来初始化 <em>%group</em> ,以及进行 MSHookFunction 等操作。</p>

<p>注意, <em>%ctor</em> 不需要以 <em>%end</em> 结尾 。</p>

<h4 id="new">%new</h4>
<p>在 <em>%hook</em> 内部使用,给一个现有 <em>class</em> 加新函数,功能与 <em>class_addMethod</em> 相同。它的用法如下:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%hook SpringBoard 
%new 
- (void)namespaceNewMethod {
     NSLog(@"We've added a new method to SpringBoard."); 
}
%end
</code></pre></div></div>

<h4 id="c">%c</h4>
<p>该指令的作用等同于 <em>objc_getClass</em> 或 <em>NSClassFromString</em>,即动态获 一个类的定义,在 <em>%hook</em> 或 <em>%ctor</em> 内使用。</p>

<h4 id="subclass">%subclass</h4>

<h4 id="config">%config</h4>
:ET