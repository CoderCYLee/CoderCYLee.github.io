I"l<ul id="markdown-toc">
  <li><a href="#新api的官方描述" id="markdown-toc-新api的官方描述">新API的官方描述</a></li>
  <li><a href="#新api的代码描述" id="markdown-toc-新api的代码描述">新API的代码描述</a></li>
  <li><a href="#用法" id="markdown-toc-用法">用法</a></li>
  <li><a href="#注意" id="markdown-toc-注意">注意</a></li>
</ul>
<hr />

<h2 id="新api的官方描述">新API的官方描述</h2>

<pre><code class="language-objective-c">// Options are specified in the section below for openURL options. An empty options dictionary will result in the same
// behavior as the older openURL call, aside from the fact that this is asynchronous and calls the completion handler rather
// than returning a result.
// The completion handler is called on the main queue.
- (void)openURL:(NSURL*)url options:(NSDictionary&lt;NSString *, id&gt; *)options completionHandler:(void (^ __nullable)(BOOL success))completion NS_AVAILABLE_IOS(10_0) NS_EXTENSION_UNAVAILABLE_IOS("");
</code></pre>

<p>这段话清楚地指明了新API的两个特点:异步执行open操作和主线程执行回调.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#pragma mark -- openURL options --

// Option for openURL:options:CompletionHandler: only open URL if it is a valid universal link with an application configured to open it
// If there is no application configured, or the user disabled using it to open the link, completion handler called with NO
UIKIT_EXTERN NSString *const UIApplicationOpenURLOptionUniversalLinksOnly NS_AVAILABLE_IOS(10_0);
</code></pre></div></div>

<p>openURL options</p>

<h2 id="新api的代码描述">新API的代码描述</h2>

<pre><code class="language-objective-c">// early
- (BOOL)openURL:(NSURL*)url NS_DEPRECATED_IOS(2_0, 10_0, "Please use openURL:options:completionHandler: instead") NS_EXTENSION_UNAVAILABLE_IOS("");
- (BOOL)canOpenURL:(NSURL *)url NS_AVAILABLE_IOS(3_0);
// now ios 10
- (void)openURL:(NSURL*)url options:(NSDictionary&lt;NSString *, id&gt; *)options completionHandler:(void (^ __nullable)(BOOL success))completion NS_AVAILABLE_IOS(10_0) NS_EXTENSION_UNAVAILABLE_IOS("");
</code></pre>

<h2 id="用法">用法</h2>

<p><code class="language-plaintext highlighter-rouge">options</code>目前可传入参数Key在<code class="language-plaintext highlighter-rouge">UIApplication</code>头文件只有一个:</p>

<p><code class="language-plaintext highlighter-rouge">UIApplicationOpenURLOptionUniversalLinksOnly</code>,其对应的Value为布尔值,默认为False.</p>

<p>如该Key对应的Value为True,那么打开所传入的Universal Link时,只允许通过这个Link所代表的iOS应用跳转的方式打开这个链接,否则就会返回success为false,也就是说只有安装了Link所对应的App的情况下才能打开这个Universal Link,而不是通过启动Safari方式打开这个Link的代表的网站.</p>

<pre><code class="language-objective-c">// options字典参数,没有限定值时就要传空字典,就像下方代码一样调用.
[[UIApplication sharedApplication] openURL:URL options:@{} completionHandler:nil];
// 等同于
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"https://www.baidu.com"] options:@{UIApplicationOpenURLOptionUniversalLinksOnly : @NO} completionHandler:nil];
</code></pre>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[UIApplication sharedApplication] openURL:URL options:@{UIApplicationOpenURLOptionUniversalLinksOnly : @YES} completionHandler:nil];
</code></pre></div></div>

<h2 id="注意">注意</h2>

<p>好像ios10不允许app跳隐私界面了</p>

<pre><code class="language-objective-c">// 都跳不过去
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"prefs:root=Privacy&amp;path=PHOTOS"]];
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"prefs:root=Privacy&amp;path=PHOTOS"] options:@{} completionHandler:nil];
[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"prefs:root=Privacy&amp;path=PHOTOS"] options:@{UIApplicationOpenURLOptionUniversalLinksOnly : @YES} completionHandler:nil];
</code></pre>

<p>不过这个还可以跳转,这个可以调到app的设置界面</p>

<pre><code class="language-objective-c">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:UIApplicationOpenSettingsURLString]];
</code></pre>
:ET